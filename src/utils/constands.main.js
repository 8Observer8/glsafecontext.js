"use strict"; 

//= ../lib/webidlparser.js

var fs = require("fs"); 

var idl, out, module, webGlContext, methods, finalObject, i, json, m, args, obj, isSequence;

idl = fs.readFileSync("webgl.idl").toString();
module = WebIDLParser.parse(idl)[0]; 

webGlContext = module.definitions.filter(function(d) {
	return d.name === "WebGLRenderingContext"; 
})[0]; 

methods = webGlContext.members.filter(function(m) { 
	return m.type === "operation"; 
}); 

finalObject = {}; 

for(i = 0; i != methods.length; i++) {
	isSequence = false; 
	m = methods[i]; 

	args = m.arguments.map(function(arg) {
		isSequence = isSequence || arg.type && arg.type.sequence; //Nasty: Have sideeffects in this loop to check if any of the argument parameters is a sequence so we don't need nested filter methods to check this. 
		return { 
			name : arg.name,	
			type : arg.type.idlType 
		}
	}); 

	if(isSequence) {
		continue; 
	}
	
	obj = {
		args : args
	}

	if(! finalObject[m.name] ) {
		finalObject[m.name] = [obj];
	} else {
		finalObject[m.name].push(obj);
	}
}


json = JSON.stringify(finalObject); 

console.log("/* this is autogenerated. Don't edit by hand! */ "); 
console.log("var METHODS = "); 
console.log(json); 
console.log(";"); 

function getIdlType(o) {
	if(typeof m.idlType === "string") {
		return m.idlType; 
	} else {
		return m.idlType.idlType; 
	}
}

function toType(obj) {
	return ({}).toString.call(obj).match(/\s([a-zA-Z0-9]+)/)[1].toLowerCase();
}

